Name: Konrad Niemiec
UCLA ID: 804423978


-------------------------------------------------------------------------------

Response to Exercise 1:
Because processes does not modify eachothers registers unless blocking,
and waiting the eax register will have the correct pid when it returns for 
that specific process.


Anything else you'd like us to know:
For Exercise 3, I just stored the pid_t of a waiting process inside the
process structure for an exiting process to find and set to runnable
again. I initialize this to -1 to not confuse with any processes. If someone
calls wait on a process, it sets itself to P_BLOCKED and the waiting 
thread's waitin_process member to its own pid. Once a process exits and 
finds that its waiting_process member is greater or equal to zero, it sets 
its state to P_RUNNABLE and sets the exit status correctly. It then resets
its waiting_process to -1 for the next process.


Extra credit exercises:
Exercise 5: 
This code should produce an output of 11
	pid_t p;
	int x = 0;
	int * volatile px2 = &x; // pointer to volatile data
	x = 10;
	p = sys_fork();
	if (p == 0) {
		px2 = &x;
		*px2 = 11;
	}
	else
		app_printf("%d",x);
	sys_exit(0);	
Exercise 6:
I also implemented exercise 6, with a simple
system call that simply creates a new process
much in the way that for does, except it does
not copy the registers or the stack, simply
sets esp and eip to the top of the stack and
the passed in function respectivly.
Exercise 7:
I implemented this as a shortcut to the exit
system call, with pretty much the same code
except for it not being the current function.
I also set the exit code to 1, which I'm not 
sure if it is correct.
